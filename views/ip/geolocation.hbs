{{> above}}
<div class="alert alert-info"><a class="alert-link" href="https://en.wikipedia.org/wiki/Geolocation_software">Geolocating an IP address</a> is not an exact science.  It depends on data collected (or volunteered
    by the community), and needs constant updates.
</div>

<h2>Results for {{ip}}</h2>

<p><a href="asn-lookup.html?ip={{ip}}">ASN</a>: {{asn}}</p>

<table class="table table-striped border-bottom">
    <thead>
        <tr>
            <th>Provider</th>
            <th>Results</th>
        </tr>
    </thead>
    <tbody>
{{#if is_current_ip}}
        <tr>
            <td><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-headers-behavior">AWS</a></td>
            <td id="aws">Pending...</td>
        </tr>
        <tr>
            <td><a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API">Browser</a></td>
            <td id="browser"><button class="btn btn-sm btn-outline-primary" onclick="browser();">Try now</button></td>
        </tr>
        <tr>
            <td><a href="https://support.cloudflare.com/hc/en-us/articles/200168236-Configuring-Cloudflare-IP-Geolocation">Cloudflare</a></td>
            <td id="cloudflare">Pending...</td>
        </tr>
        <tr>
            <td><a href="https://cloud.google.com/appengine/docs/standard/go/reference/request-response-headers">Google AppEngine</a></td>
            <td id="appengine">Pending...</td>
        </tr>
{{/if}}
        <tr>
            <td><a href="http://www.hostip.info/use.php">HostIP.info</a></td>
            <td id="hostipinfo">Pending...</td>
        </tr>
        <tr>
            <td><a href="https://ip-api.com/">IP-API</a></td>
            <td id="ip_api">Pending...</td>
        </tr>
        <tr>
            <td><a href="https://ipapi.com/">ipapi</a></td>
            <td id="ipapi">Pending...</td>
        </tr>
        <tr>
            <td><a href="https://ipdata.co/">ipdata</a></td>
            <td id="ipdata">Pending...</td>
        </tr>
        <tr>
            <td><a href="https://ipgeolocation.io/">ipgeolocation</a></td>
            <td id="ipgeolocation">Pending...</td>
        </tr>
        <tr>
            <td><a href="https://ipstack.com/">ipstack</a></td>
            <td id="ipstack">Pending...</td>
        </tr>
        <tr>
            <td><a href="https://tools.keycdn.com/geo">KeyCDN</a></td>
            <td id="keycdn">Pending...</td>
        </tr>
        <tr>
            <td><a href="https://dev.maxmind.com/geoip/geoip2/geolite2/">Maxmind</a></td>
            <td id="maxmind">{{{maxmind_noscript}}}</td>
        </tr>
    </tbody>
</table>

<h2>Check a Specific IP Address</h2>

<form action="geolocation.html" method="GET">
<div class="row">
    <div class="col d-flex justify-content-center">
    <div class="card col-lg-5 px-0">
        <div class="card-body">
            <h5 class="card-title text-center">IP Geolocation</h5>
            <div class="form-group">
                <label for="ip">IP Address</label>
                <input type="text" class="form-control" id="ip" name="ip" value="{{ip}}" />
            </div>
            <input class="btn btn-primary" type="submit" value="Locate" />
        </div>
    </div>
    </div>
</div>
</form>

<hr/>

<h2>Other IP Geolocation Databases</h2>

<div class="alert alert-info">
    Note: all pricing is for the lowest service level possible. They all have higher priced options (of course).<br/><br/>
    In my testing, a lot of the providers are using the MaxMind database, even if they don't admin it.
</div>

<ul>
    <li><a href="https://cloud.google.com/appengine/docs/standard/go/reference/request-response-headers">AppEngine</a> (Google) - includes HTTP headers with full details if you are hosting with them. <span class="badge badge-info">browser only</span></li>
    <li><a href="http://www.atelierweb.com/products/ip-locator/">Atelier Web IP Locator</a> - $40 for 50,000 lookups.  Free plan is 200 per 30 days.</li>
    <li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-headers-behavior">AWS</a> - includes HTTP header with country if you are using their CloudFront CDN <span class="badge badge-info">browser only</span></li>
    <li><a href="https://support.cloudflare.com/hc/en-us/articles/200168236-Configuring-Cloudflare-IP-Geolocation">Cloudflare</a> - includes an HTTP header with Country if you are using their CDN. <span class="badge badge-info">browser only</span></li>
    <li><a href="https://www.cyscape.com/products/chawk/">CountryHawk</a> (Cyscape) - $669 per server per year</li>
    <li><a href="https://www.geojs.io/">geojs</a> - free with no rate limits, uses MaxMind data</li>
    <li><a href="https://www.geoplugin.com/">GeoPlugin</a> - free, uses MaxMind data</li>
    <li><a href="http://www.hostip.info/use.php">HostIP.info</a> - free, and you can download their database, but they recommend MaxMind for higher accuracy</li>
    <li><a href="https://ip-api.com/">ip-api</a>: 45/minute free for non-commercial use (http only!), &euro;13/month for unlimited.</li>
    <li><a href="https://ipapi.com/">ipapi</a>: 10,000/month free, $10/month for 50,000</li>
	<li><a href="https://ifconfig.co/">ipconfig.co</a> - free 1 request/minute.  uses MaxMind data.  source available.
    <li><a href="https://ipdata.co/pricing.html">ipdata</a>: 1,500/day free, $10/month for 2,500/day</li>
    <li><a href="https://ipgeolocation.io/pricing.html">ipgeolocation.io</a> - 1,000/day free.  $15/month for 150,000</li>
    <li><a href="https://www.ip2location.com/">IP2Location</a> - $49 for 100,000 lookups.  They also sell their database(s) for local use.</li>
    <li><a href="http://www.ip2nation.com/">ip2nation</a> - downloadable database, free, only gets the country (which is often good enough!)</li>
    <li><a href="https://ipstack.com/">ipstack</a> 10,000/month free, $10/month for 50,000</li>
    <li><a href="https://tools.keycdn.com/geo">KeyCDN</a> - free but requires a link back to their site.  &ldquo;includes data from MaxMind&rdquo;</li>
    <li><a href="https://www.maxmind.com/en/geoip2-precision-services">MaxMind</a> - in addition to their free offering (used above), they have a commercial service that starts at $0.10 per 1,000 lookups.</li>
    <li><a href="https://www.melissa.com/v2/lookups/iplocation/ip/">Melissa</a> - 1,000/free, then $3 per 1,000.</li>
    <li><a href="https://www.home.neustar/security-intelligence/ip-geopoint">UltraGeoPoint</a> (Neustar)- no pricing on website</li>
</ul>

<p>
    <span class="badge badge-info">browser only</span> means it only looks at the caller's IP address, not an arbitrary address that you pass in.
</p>

<h3>Internet Governing Bodies</h3>
<ul>
    <li><a href="https://search.arin.net/rdap/">ARIN Whois/RDAP lookup</a></li>
    <li><a href="https://apps.db.ripe.net/db-web-ui/query">RIPE Database Query</a></li>
    <li><a href="https://afrinic.net/whois-web/public/query">AFRINIC Query</a></li>
    <li><a href="https://rdap-web.lacnic.net/home">LANIC RDAP Web Client</a> - <a href="https://www.lacnic.net/3106/2/lacnic/ip-geolocation">details</a></li>
</ul>

<h3>To Do</h3>

<ul>
    <li><a href="https://labstack.com/ip#pricing">LabStack</a></li>
    <li><a href="https://auth0.com/signals/ip">Auth0</a></li>
    <li><a href="https://github.com/analogic/ipgeo">analogic</a></li>
    <li><a href="(http://geo.zombe.es/">Fastly via zombees</a> - <a href="https://gist.github.com/simonkuhn/a380a6fa205db87a3625f26ad09e6593">source</a></li>
    <li><a href="https://ipwhois.io/">ipwhois</a> - free for 10,000/month non-commerical, $11/month for 250,000.</li>
    <li><a href="https://www.bigdatacloud.com/">BigDataCloud</a> - free for 10,000/month, then $2/month per 10,000.</li>
    <li><a href="https://ipregistry.co/">ipregistry</a>- free for 100,000/month, then $0.10 per 1,000.</li>
	<li><a href="http://geolocation-db.com/index">GeolocationDB</a></li>
	<li><a href="https://ipinfodb.com/api">IpInfoDB</a> - uses ip2location</li>
	<li><a href="https://developers.google.com/maps/documentation/geolocation/overview">Google Maps</a> - meant to be called with mobile phone info, but will fallback to IP</li>
	<li><a href="http://software77.net/geo-ip/">Software77</a> - downloadable database</li>
    <li><a href="https://docs.microsoft.com/en-us/rest/api/maps/geolocation/getiptolocationpreview">Microsoft Azure Maps</a></li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API">Browser</a></li>
</ul>

<h3>More Links</h3>

<ul>
    <li><a href="https://rapidapi.com/blog/ip-geolocation-api/">Top 10 Best IP Geolocation APIs</a> - RapidAPI</li>
    <li><a href="https://geekflare.com/geolocation-ip-api/">10 Best IP Geolocation API to Offer Personalized Content</a> - GeekFlare</li>
    <li><a href="https://medium.com/hackernoon/what-is-the-best-ip-geolocation-api-for-cybersecurity-professionals-87653b625376">11 Best IP Geolocation APIs for Cybersecurity Professionals</a> - Medium/Hackernoon</li>
</ul>

<script>

    function htmlEncode(raw) {
        return raw;
    }

    function formatResult(text, country_code, latitude, longitude, raw) {
        //LATER
        const details = document.createElement("details");
        const summary = document.createElement("summary");
        summary.append(country_code || '(no country code)');
        if (text) {
            summary.append(": ");
            summary.append(text);
        }
        details.append(summary);

        if (latitude && longitude) {
            const mapLink = document.createElement("a");
            mapLink.setAttribute("href", `https://www.openstreetmap.org/?mlat=${latitude}&mlon=${longitude}&zoom=12`);
            mapLink.append(`${latitude}, ${longitude}`);
            summary.append(": ");
            summary.append(mapLink);
        }

        const pre = document.createElement("pre");
        pre.append(JSON.stringify(raw, null, 2));
        details.append(pre);

        return details;
    }

{{#if is_current_ip}}
    async function appengine(ip) {
        const el = document.getElementById('appengine')
        try {
            el.innerText = 'Loading...';
            const response = await fetch(`https://ae-geo.redirect2.me/api/appengine.json`, {
                referrerPolicy: ''
                });
            if (!response.ok) {
                el.innerText = `ERROR ${response.status}: ${response.statusText}`;
                return;
            }
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                el.innerText = `ERROR non-json response (${contentType})`;
                return;
            }
            const result = await response.json();
            console.log(`appengine result = ${JSON.stringify(result)}`);
            el.innerText = '';
            el.append(formatResult(result.text, result.country, result.latitude, result.longitude, result.raw));
        } catch (err) {
            el.innerText = `ERROR ${err.message}`;
        }
    }

    async function aws(ip) {
        const el = document.getElementById('aws')
        try {
            el.innerText = 'Loading...';
            const response = await fetch(`https://aws-geo.redirect2.me/api/aws.json`, {
                referrerPolicy: ''
                });
            if (!response.ok) {
                el.innerText = `ERROR ${response.status}: ${response.statusText}`;
                return;
            }
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                el.innerText = `ERROR non-json response (${contentType})`;
                return;
            }
            const result = await response.json();
            console.log(`aws result = ${JSON.stringify(result)}`);
            el.innerText = '';
            el.append(formatResult(result.text, result.country, result.latitude, result.longitude, result.raw));
        } catch (err) {
            el.innerText = `ERROR ${err.message}`;
        }
    }

    // needs since the position object doesn't own the properties...
    function toObject(position) {
        return {
            coords: {
                accuracy: position.coords.accuracy,
                altitude: position.coords.altitude,
                altitudeAccuracy: position.coords.altitudeAccuracy,
                heading: position.coords.heading,
                latitude: position.coords.latitude,
                longitude: position.coords.longitude,
                speed: position.coords.speed,
            },
            timestamp: position.timestamp,
        };
    }

    async function browser() {
        const el = document.getElementById('browser')
        if('geolocation' in navigator) {
            el.innerText = 'Calling Geolocation API...';
            navigator.geolocation.getCurrentPosition((position) => {
                console.log('browser position', position);
                const latitude = position && position.coords ? position.coords.latitude : null;
                const longitude = position && position.coords ? position.coords.longitude : null;
                el.innerText = '';
                el.append(formatResult(null, null, latitude, longitude, toObject(position)));
            },
            (err) => {
                el.innerText = `ERROR: ${err.message} (${err.code})`;
            });
        } else {
            el.innerText = 'Geolocation API not available in your browser!';
        }
    }

    async function cloudflare() {
        const el = document.getElementById('cloudflare')
        try {
            el.innerText = 'Loading...';
            const response = await fetch(`https://cf-geo.redirect2.me/api/cloudflare.json`, {
                referrerPolicy: ''
                });
            if (!response.ok) {
                el.innerText = `ERROR ${response.status}: ${response.statusText}`;
                return;
            }
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                el.innerText = `ERROR non-json response (${contentType})`;
                return;
            }
            const result = await response.json();
            console.log(`cloudflare result = ${JSON.stringify(result)}`);
            el.innerText = '';
            el.append(formatResult(result.text, result.country, result.latitude, result.longitude, result.raw));
        } catch (err) {
            el.innerText = `ERROR ${err.message}`;
        }
    }
{{/if}}

    async function hostIpInfo(ip) {
        const el = document.getElementById('hostipinfo')
        try {
            el.innerText = 'Loading...';
            const response = await fetch(`https://api.hostip.info/get_json.php?ip=${encodeURIComponent(ip)}&position=true`, {
                referrerPolicy: ''
                });
            if (!response.ok) {
                el.innerText = `ERROR ${response.status}: ${response.statusText}`;
                return;
            }
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                el.innerText = `ERROR non-json response (${contentType})`;
                return;
            }
            const result = await response.json();
            console.log(`hostip.info result = ${JSON.stringify(result)}`);
            el.innerText = '';
            el.append(formatResult(`${result.city}, ${result.country_name}`, result.country_code, result.latitude, result.longitude, result));
        } catch (err) {
            el.innerText = `ERROR ${err.message}`;
        }
    }

    async function ip_api(ip) {
        const el = document.getElementById('ip_api')
        try {
            el.innerText = 'Loading...';
            const response = await fetch(`/internal/ip-api.json?ip=${encodeURIComponent(ip)}`, {
                referrerPolicy: ''
            });
            if (!response.ok) {
                el.innerText = `ERROR ${response.status}: ${response.statusText}`;
                return;
            }
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                el.innerText = `ERROR non-json response (${contentType})`;
                return;
            }
            const result = await response.json();
            console.log(`ip_api result = ${JSON.stringify(result)}`);
            if (!result.success) {
                el.innerText = result.message;
                return;
            }
            el.innerText = '';
            el.append(formatResult(result.text, result.country, result.latitude, result.longitude, result.raw));
        } catch (err) {
            el.innerText = `ERROR ${err.message}`;
        }
    }

    async function ipapi(ip) {
        const el = document.getElementById('ipapi')
        try {
            el.innerText = 'Loading...';
            const response = await fetch(`/internal/ipapi.json?ip=${encodeURIComponent(ip)}`, {
                referrerPolicy: ''
            });
            if (!response.ok) {
                el.innerText = `ERROR ${response.status}: ${response.statusText}`;
                return;
            }
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                el.innerText = `ERROR non-json response (${contentType})`;
                return;
            }
            const result = await response.json();
            console.log(`ipapi result = ${JSON.stringify(result)}`);
            if (!result.success) {
                el.innerText = result.message;
                return;
            }
            el.innerText = '';
            el.append(formatResult(result.text, result.country, result.latitude, result.longitude, result.raw));
        } catch (err) {
            el.innerText = `ERROR ${err.message}`;
        }
    }

    async function ipdata(ip) {
        const el = document.getElementById('ipdata')
        try {
            el.innerText = 'Loading...';
            const response = await fetch(`/internal/ipdata.json?ip=${encodeURIComponent(ip)}`, {
                referrerPolicy: ''
                });
            if (!response.ok) {
                el.innerText = `ERROR ${response.status}: ${response.statusText}`;
                return;
            }
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                el.innerText = `ERROR non-json response (${contentType})`;
                return;
            }
            const result = await response.json();
            console.log(`ipdata result = ${JSON.stringify(result)}`);
            if (!result.success) {
                el.innerText = result.message;
                return;
            }
            el.innerText = '';
            el.append(formatResult(result.text, result.country, result.latitude, result.longitude, result.raw));
        } catch (err) {
            el.innerText = `ERROR ${err.message}`;
        }
    }

    async function ipGeoLocation(ip) {
        const el = document.getElementById('ipgeolocation')
        {{#if ipgeolocation_api_key}}
        try {
            el.innerText = 'Loading...';
            const response = await fetch(`https://api.ipgeolocation.io/ipgeo?apiKey={{ipgeolocation_api_key}}&ip=${encodeURIComponent(ip)}&position=true`, {
                referrerPolicy: ''
                });
            if (!response.ok) {
                el.innerText = `ERROR ${response.status}: ${response.statusText}`;
                return;
            }
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                el.innerText = `ERROR non-json response (${contentType})`;
                return;
            }
            const result = await response.json();
            console.log(`ipgeolocation.io result = ${JSON.stringify(result)}`);
            el.innerText = '';
            el.append(formatResult(`${result.city}, ${result.state_prov}, ${result.country_name}`, result.country_code2, result.latitude, result.longitude, result));
        } catch (err) {
            el.innerText = `ERROR ${err.message}`;
        }
        {{else}}
            el.innerText = 'ERROR: server is not configured with an API key';
        {{/if}}
    }

    async function ipstack(ip) {
        const el = document.getElementById('ipstack')
        try {
            el.innerText = 'Loading...';
            const response = await fetch(`/internal/ipstack.json?ip=${encodeURIComponent(ip)}`, {
                referrerPolicy: ''
                });
            if (!response.ok) {
                el.innerText = `ERROR ${response.status}: ${response.statusText}`;
                return;
            }
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                el.innerText = `ERROR non-json response (${contentType})`;
                return;
            }
            const result = await response.json();
            console.log(`ipstack result = ${JSON.stringify(result)}`);
            if (!result.success) {
                el.innerText = result.message;
                return;
            }
            el.innerText = '';
            el.append(formatResult(result.text, result.country, result.latitude, result.longitude, result.raw));
        } catch (err) {
            el.innerText = `ERROR ${err.message}`;
        }
    }

    async function keycdn(ip) {
        const el = document.getElementById('keycdn')
        try {
            el.innerText = 'Loading...';
            const response = await fetch(`/internal/keycdn.json?ip=${encodeURIComponent(ip)}`, {
                referrerPolicy: ''
                });
            if (!response.ok) {
                el.innerText = `ERROR ${response.status}: ${response.statusText}`;
                return;
            }
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                el.innerText = `ERROR non-json response (${contentType})`;
                return;
            }
            const result = await response.json();
            el.innerText = '';
            el.append(formatResult(result.text, result.country, result.latitude, result.longitude, result.raw));
        } catch (err) {
            el.innerText = `ERROR ${err.message}`;
        }
    }

    async function maxmind(data) {
        const el = document.getElementById('maxmind')
        try {

            const countryCode = data && data.country ? data.country.iso_code : null;
            const latitude = data && data.location ? data.location.latitude : null;
            const longitude = data && data.location ? data.location.longitude : null;

            const city = data && data.city && data.city.names ? data.city.names.en : null;
            const region = data && data.subdivisions && data.subdivisions.length > 0 && data.subdivisions[0].names ? data.subdivisions[0].names.en : null;
            const country = data && data.country && data.country.names ? data.country.names.en : null;

            el.innerText = '';
            el.append(formatResult(`${city}, ${region}, ${country}`, countryCode, latitude, longitude, data));
        } catch (err) {
            el.innerText = `ERROR ${err.message}`;
        }

    }

    maxmind({{{toJson maxmind}}})

{{#if is_current_ip}}
    appengine();
    aws();
    cloudflare();
{{/if}}
    hostIpInfo("{{ip}}");
    ip_api("{{ip}}");
    ipapi("{{ip}}");
    ipdata("{{ip}}");
    ipGeoLocation("{{ip}}");
    ipstack("{{ip}}");
    keycdn("{{ip}}");
</script>

{{> below}}
